pipeline:
  projectIdentifier: Security_Test_Scans
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Shell
        identifier: Shell
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Define_Repositories
                  identifier: Define_Repositories
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo "harness/drone-cli:master
                          harness/lite-engine:main
                          harness/global-gateway:develop
                          drone/policy-mgmt:main
                          drone/drone-jira:master
                          drone/drone-plugin-index:main" > file.txt

                          # Read lines from file.txt, convert to CSV, and remove duplicates
                          output=$(awk '!seen[$0]++' file.txt | paste -s -d ",")

                          # Save CSV output to a variable
                          csv_contents="$output"
                          echo "$csv_contents"
                    environmentVariables: []
                    outputVariables:
                      - name: myvar
                        type: String
                        value: csv_contents
                  timeout: 10m
        tags: {}
    - stage:
        name: clone repos
        identifier: clone_repos
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          caching:
            enabled: false
            paths: []
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - stepGroup:
                  name: semgrep_scan
                  identifier: semgrep_scan
                  steps:
                    - step:
                        type: GitClone
                        name: GitClone_1
                        identifier: GitClone_1
                        spec:
                          connectorRef: pranaytodolist
                          repoName: <+matrix.jira.split(":")[0]>
                          cloneDirectory: /harness/<+matrix.jira.split(":")[0]>
                          build:
                            type: branch
                            spec:
                              branch: <+matrix.jira.split(":")[1]>
                    - step:
                        type: Semgrep
                        name: Semgrep_Ingestion
                        identifier: Semgrep_Ingestion
                        spec:
                          mode: orchestration
                          config: default
                          target:
                            type: repository
                            workspace: /harness/<+matrix.jira.split(":")[0]>
                            detection: manual
                            name: <+matrix.jira.split(":")[0]>
                            variant: <+matrix.jira.split(":")[1]>
                          advanced:
                            log:
                              level: info
                  strategy:
                    matrix:
                      spec:
                        maxConcurrency: 1
                      jira: <+pipeline.stages.Shell.spec.execution.steps.Define_Repositories.output.outputVariables.myvar.split(',')>
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    shell: Sh
                    command: |-
                      echo "******* ls / *******"
                      ls

                      echo "******** ls /harness/harness *********"
                      ls /harness/harness

                      echo "******** ls /harness/drone *********"
                      ls /harness/drone


                      echo "******** ls /harness/drone/drone-jira *********"
                      ls /harness/drone/drone-jira

                      echo "******** ls /harness/drone/drone-plugin-index *********"
                      ls /harness/drone/drone-plugin-index


                      echo "******** ls /harness/drone/policy-mgmt *********"
                      ls /harness/drone/policy-mgmt

                      echo "find sarif"
                      ls /tmp
                      find / -name "output.sarif" 2>/dev/null
              - step:
                  type: Run
                  name: Run_2
                  identifier: Run_2
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash

                      # Initialize the CSV file with a header
                      output_file="sarif_summary.csv"
                      echo "Repository,Total Findings,Critical,High,Medium,Low" > $output_file

                      # Locate and process each SARIF file
                      find / -type f -name "output.sarif" 2>/dev/null | while read sarif_file; do
                          # Extract repository name from SARIF file, setting to "Unknown" if missing
                          repo_name=$(jq -r '.runs[0].results[0].locations[0].physicalLocation.artifactLocation.uri // "Unknown"' "$sarif_file" | cut -d '/' -f 1)

                          # Count total findings
                          total_findings=$(jq '.runs[].results | length' "$sarif_file" || echo "0")

                          # Extract severities
                          critical=$(jq '[.runs[].results[] | select(.properties."security-severity" >= 9 or .properties.severity == "CRITICAL")] | length' "$sarif_file" || echo "0")
                          high=$(jq '[.runs[].results[] | select(.properties."security-severity" >= 7 and .properties."security-severity" < 9 or .properties.severity == "HIGH")] | length' "$sarif_file" || echo "0")
                          medium=$(jq '[.runs[].results[] | select(.properties."security-severity" >= 4 and .properties."security-severity" < 7 or .properties.severity == "MEDIUM")] | length' "$sarif_file" || echo "0")
                          low=$(jq '[.runs[].results[] | select(.properties."security-severity" < 4 or .properties.severity == "LOW")] | length' "$sarif_file" || echo "0")
                          
                          # Print summary of each SARIF file
                          echo "Repository: $repo_name"
                          echo "Total Findings: $total_findings"
                          echo "Critical: $critical, High: $high, Medium: $medium, Low: $low"
                          echo "----------------------------------------"
                          
                          # Append data to the CSV file
                          echo "$repo_name,$total_findings,$critical,$high,$medium,$low" >> $output_file
                      done

                      # Confirm CSV summary creation
                      echo "CSV summary created: $output_file"
          buildIntelligence:
            enabled: false
  identifier: multirepoclone_GS
  name: multi-repo-clone GS
