pipeline:
  name: test_prodsec_gs
  identifier: test_prodsec_gs
  projectIdentifier: Security_Test_Scans
  orgIdentifier: default
  variables:
    - name: SKIP_TESTS
      type: String
      value: "true"
  tags: {}
  stages:
    - stage:
        name: Semgrep Scan - Multiple repos
        identifier: Semgrep_Scan_Multiple_repos
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Semgrep_Scan
                  identifier: Semgrep_Scan
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash

                          # Step 1: Install Python and Pip using microdnf
                          echo "Installing Python and Pip using microdnf..."
                          microdnf install -y python39 python39-pip git jq
                          microdnf clean all

                          # Step 2: Install Semgrep using pip
                          echo "Installing Semgrep..."
                          pip3 install semgrep

                          # Step 3: Verify Semgrep installation
                          echo "Verifying Semgrep installation..."
                          semgrep --version

                          # Step 4: Clone the repository containing the orgs_repos.txt file
                          echo "Cloning the repository containing orgs_repos.txt..."
                          git clone https://github.com/gunwantsingh-harness/test_app.git
                          cd test_app || exit 1

                          # Step 5: Read and parse the orgs_repos.txt file
                          declare -A orgs_and_repos
                          while IFS=: read -r org repos; do
                              # Skip empty lines or lines starting with #
                              [[ -z "$org" || "$org" =~ ^# ]] && continue

                              # Remove leading/trailing whitespaces and commas
                              org=$(echo "$org" | xargs)
                              repos=$(echo "$repos" | xargs | sed 's/,/ /g')

                              # Add to associative array
                              orgs_and_repos["$org"]="$repos"
                          done < orgs_repos.txt

                          # Step 6: Initialize variables for the summary
                          declare -A repo_summaries

                          # Step 7: Function to clone the default branch, print the default branch, run Semgrep, and print results summary
                          scan_repo() {
                              local org=$1
                              local repo=$2
                              local cloned="NO"
                              local scanned="NO"
                              local issues_count=0

                              echo "Scanning repo: ${org}/${repo}"

                              # Clone the repository
                              git clone https://github.com/${org}/${repo}.git
                              if [ $? -ne 0 ]; then
                                  echo "Failed to clone repository ${org}/${repo}. Skipping."
                                  repo_summaries["${org}/${repo}"]="${org},${repo},NO,NO,0"
                                  return
                              fi
                              cloned="YES"

                              cd ${repo} || exit 1

                              # List contents of the cloned repo
                              echo "Contents of ${repo}:"
                              ls

                              # Fetch the default branch
                              default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

                              # Print the default branch
                              echo "Default branch for ${repo} is ${default_branch}"

                              # Checkout the default branch
                              git checkout $default_branch

                              # Run Semgrep on the default branch and store results in SARIF format
                              result_file="../${repo}_results.sarif"
                              semgrep ci --config auto --sarif -o $result_file
                              scanned="YES"

                              # Check the results
                              if [ -f "$result_file" ]; then
                                  issues_count=$(jq '.runs[0].results | length' $result_file)
                                  echo "Summary for ${repo}:"
                                  echo "Total issues found: $issues_count"
                              else
                                  echo "No results file generated for ${repo}"
                              fi

                              # Move back to the parent directory and clean up
                              cd ..
                              echo "Cleaning up cloned repo: ${repo}"
                              rm -rf ${repo}

                              # Record the summary for this repo
                              repo_summaries["${org}/${repo}"]="${org},${repo},${cloned},${scanned},${issues_count}"
                          }

                          # Step 8: Loop through each org and its repos
                          for org in "${!orgs_and_repos[@]}"; do
                              repos=${orgs_and_repos[$org]}
                              for repo in $repos; do
                                  scan_repo $org $repo
                              done
                          done

                          # Step 9: Final summary with columns: org name, repo name, successfully cloned, successfully scanned, no. of issues
                          echo -e "\n\033[1;32mFinal Scan Summary:\033[0m"
                          printf "%-20s %-20s %-10s %-10s %-15s\n" "Org Name" "Repo Name" "Cloned" "Scanned" "No. of Issues"
                          for repo in "${!repo_summaries[@]}"; do
                              summary="${repo_summaries[$repo]}"
                              IFS=',' read -r org_name repo_name cloned scanned issues <<< "$summary"
                              printf "%-20s %-20s %-10s %-10s \033[1;32m%-15s\033[0m\n" "$org_name" "$repo_name" "$cloned" "$scanned" "$issues"
                          done
                    environmentVariables: []
                    outputVariables: []
                  when:
                    stageStatus: Success
                    condition: <+OnStageSuccess> && <+pipeline.variables.SKIP_TESTS> == 'false'
                    outputVariables: []
                  timeout: 10m
        tags: {}
